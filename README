Main document for 'Event Analysis 2.0':

https://docs.google.com/document/d/17y7h1CZJNzvXtxon5jKMv3yCrUgYpfCIiAGauUlQTtY/edit?usp=sharing

Top dir:
/blue/mcintyre/share/OM_transcript_distance

* Jeremy's code - https://github.com/McIntyre-Lab/events

* Jeremy's article: 'Event Analysis: Using Transcript Events To Improve Estimates of Abundance in
  RNA-seq Data' - https://www.g3journal.org/content/8/9/2923

* Adolina's flybase job scripts
 - If not in flybase then need to convert gff to a flybase gff.
  submit_create_formatted_gff3_baseline_NIC_NNC.sbatch
 - Takes the flybase gff and builds annotations
  run_buildAnnotations_dm617_150bp.sh
Only need some pieces. There is an index with a unique list of transcript annotations, but for
pairwise we need a way around it as it's everything. Could probably do it by gene.

* Input into event analysis annotation building

├── input_EA_annotation
│   ├── dmel-all-no-analysis-r6.17.gff
│   └── dmel-all-r6.17.gtf
Would like to be able to use both gff3 and gtf

* Adolina's run script:
└── run_transcriptDistance_dmel617.sh

* Adolina's code
├── calculate_transcript_distance

* Documentation
├── flybase617_transcript_distance_documentation.xlsx

* Input into transcript distance
├── input_into_transcript_distance
It's a subset of even analysis annotation building

* Current output for testing/validation
├── output_from_transcript_distance

├── calculate_transcript_distance
│   ├── calculate_pairwise_distance_03avn.py
│   ├── extract_transcript_id_gene_id_pairs.py
│   ├── FSM_consolidation_functions.py
│   ├── get_transcript_level_frag_variables_03avn.py
│   ├── get_transcript_level_fusion_variables_03avn.py
│   ├── get_transcript_level_junction_variables_04avn.py
│   ├── merge_transcript_level_junction_frag_exonRegion_02avn.py
│   └── run_transcriptDistance.sh
├── flybase617_transcript_distance_documentation.xlsx
├── input_EA_annotation
│   ├── dmel-all-no-analysis-r6.17.gff
│   └── dmel-all-r6.17.gtf
├── input_into_transcript_distance
│   ├── dmel617_event2transcript2gene_index.csv
│   ├── dmel617_exon_fragment_annotations.csv
│   ├── dmel617_fusion_annotations.csv
│   └── dmel617_junctions_full_annotation.csv
├── output_from_transcript_distance
│   ├── dmel617_pairwise_transcript_distance.csv
│   ├── dmel617_transcript_id_2_gene_id.csv
│   ├── dmel617_transcript_level_exonRegion.csv
│   ├── dmel617_transcript_level_frag.csv
│   ├── dmel617_transcript_level_junction.csv
│   └── dmel617_transcript_level_merged.csv
└── run_transcriptDistance_dmel617.sh

* Events is run on a single gff file as it creates annotations per each gene.

* For a single gff file do all pairwise comparisons for all genes in the gff.
* If two gff files are given do comparisons by gene for Lines or Treatments across two conditions
  gff files represent


Scenario 1:
* Take 1 gff file and for all genes:
  - Genes with single transcripts - separate 'singletons' gff output file
  - Genes that have more than 1 transcript
    * do pairwise comparisons between all pairs of transcripts and record the distance measurements
     (pre-processing) to create a matrix of all pairs with distance measures (+proportions of
     similarity and distance)
    * Calculate % similarity/difference for


E.g.
* To process dmel617_exon_fragment_annotations.csv  dmel617_fusion_annotations.csv
  dmel617_junctions_full_annotation.csv
  use
  get_transcript_level_frag_variables_03avn.py
  get_transcript_level_fusion_variables_03avn.py
  get_transcript_level_junction_variables_04avn.py

  Output:
  dmel617_transcript_level_frag.csv
  dmel617_transcript_level_exonRegion.csv
  dmel617_transcript_level_junction.csv

  * Merge the above outputs into dmel617_transcript_level_merged.csv with
    merge_transcript_level_junction_frag_exonRegion_02avn.py

  * Final calc:
      dmel617_transcript_level_merged.csv is the input for calculate_pairwise_distance_03avn.py

GFF format -  https://m.ensembl.org/info/website/upload/gff3.html

##gff-version 3

Fields must be tab-separated. Also, all but the final field in each feature line must contain a value; "empty" columns should be denoted with a '.'

    seqid - name of the chromosome or scaffold; chromosome names can be given with or without the 'chr' prefix. Important note: the seq ID must be one used within Ensembl, i.e. a standard chromosome name or an Ensembl identifier such as a scaffold ID, without any additional content such as species or assembly. See the example GFF output below.
    source - name of the program that generated this feature, or the data source (database or project name)
    type - type of feature. Must be a term or accession from the SOFA sequence ontology
    start - Start position of the feature, with sequence numbering starting at 1.
    end - End position of the feature, with sequence numbering starting at 1.
    score - A floating point value.
    strand - defined as + (forward) or - (reverse).
    phase - One of '0', '1' or '2'. '0' indicates that the first base of the feature is the first base of a codon, '1' that the second base is the first base of a codon, and so on..
    attributes - A semicolon-separated list of tag-value pairs, providing additional information about each feature. Some of these tags are predefined, e.g. ID, Name, Alias, Parent - see the GFF documentation for more details.

Note that where the attributes contain Parent identifiers, these will be used by Ensembl to display the features as joined blocks.

##gff-version 3
ctg123 . mRNA            1300  9000  .  +  .  ID=mrna0001;Name=sonichedgehog
ctg123 . exon            1300  1500  .  +  .  ID=exon00001;Parent=mrna0001
ctg123 . exon            1050  1500  .  +  .  ID=exon00002;Parent=mrna0001
ctg123 . exon            3000  3902  .  +  .  ID=exon00003;Parent=mrna0001
ctg123 . exon            5000  5500  .  +  .  ID=exon00004;Parent=mrna0001
ctg123 . exon            7000  9000  .  +  .  ID=exon00005;Parent=mrna0001

  1       2      3        4      5    6       7       8         9
seqid	source	type	start	end	score	strand	phase	attributes
211000022278942	FlyBase	golden_path_region	1	2384	.	.	.	ID=211000022278942;Name=211000022278942;Dbxref=GB:DS484309,GB:DS484309,REFSEQ:NW_001845598
211000022278942	DHGP	repeat_region	480	976	.	+	.	ID=RR42222_repeat_region;Name=TART{}RR42222
211000022278942	TSS_RAMPAGE	transcription_start_site	1470	1570	.	+	.	ID=FBsf0000544597;Name=TSS_RAMPAGE_000055;Dbxref=FlyBase:FBsf0000544597;library=TSS_RAMPAGE:FBlc0000537

* Note: filtering out all useless records and a topological sort gene > mRNA > CDS > Exon > Intron
  would probably be a great first step.

http://ccb.jhu.edu/software/stringtie/gff.shtml

As defined by the GFF3 specification, the parent features (usually transcripts, i.e. "mRNA"
features) are required to have an ID attribute, but here again an optional gene_name attribute can
be used to specify a common gene name abbreviation. If gene_name is not given, it can be also
inferred from the Name or ID attributes of the parent gene feature of the current parent mRNA
feature (if given in the input file). CDS and exon features are required to have a Parent attribute
whose value must match the value of the ID attribute of a parent transcript feature (usually a
"mRNA" feature).
